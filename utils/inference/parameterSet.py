'''
功能：
1、拆分过程中涉及的参数
2、获取TCT中各类文件夹的路径以及对应的测试样本名称
'''
import numpy as np 
import cv2
from lib.sdpcreader.sdpc_reader import sdpc
from lib.srpreader.srp_python_win import pysrp
from openslide import OpenSlide


def Size_set(input_str = {'filetype': '.sdpc',# .svs .sdpc .mrxs
                 'level': 0,#与input_resolution相对应的level，比如our level1，那么input_resolution为0.293*4=1.172
                 'read_size_model1_resolution': (1936, 1216), #1936 1216 横 model1_resolution下
                 'scan_over': (120, 120),#为上面的(1936, 1216)之间的冗余
                 'model1_input': (512, 512, 3),
                 'model2_input': (256, 256, 3),
                 'model1_resolution':0.586,
                 'model2_resolution':0.293,
                 'input_resolution':0.179,
                 'cut':'5*3'}):
    #input_str中的level是与input_resolution相对应的，如果是level1，那么input_resolution为0.179*2
    level = input_str['level']
    sizepatch_read = tuple(np.uint32(np.dot(input_str['read_size_model1_resolution'],input_str['model1_resolution']/input_str['input_resolution'])))
    widthOverlap = tuple(np.uint32(np.dot(input_str['scan_over'],input_str['model1_resolution']/input_str['input_resolution'])))
    sizepatch_small1 = tuple(np.uint32(np.dot(input_str['model1_input'][:-1],input_str['model1_resolution']/input_str['input_resolution'])))
    sizepatch_small2 = tuple(np.uint32(np.dot(input_str['model2_input'][:-1],input_str['model2_resolution']/input_str['input_resolution'])))
    # predict size
    sizepatch_predict_model1 = input_str['read_size_model1_resolution']
    sizepatch_predict_model2 = tuple(np.uint32(np.dot(input_str['read_size_model1_resolution'],input_str['model1_resolution']/input_str['model2_resolution'])))
    sizepatch_predict_small1 = input_str['model1_input'][:-1]
    sizepatch_predict_small2 = input_str['model2_input'][:-1]
    num_w = int(input_str['cut'].split('*')[0])
    num_h = int(input_str['cut'].split('*')[1])
    widthOverlap_predict_w = np.ceil(sizepatch_predict_small1[0]-(sizepatch_predict_model1[0]-sizepatch_predict_small1[0])/(num_w-1))
    widthOverlap_predict_h = np.ceil(sizepatch_predict_small1[1]-(sizepatch_predict_model1[1]-sizepatch_predict_small1[1])/(num_h-1))
    widthOverlap_predict = (int(widthOverlap_predict_w),int(widthOverlap_predict_h))
    if input_str['filetype'] == '.mrxs' or input_str['filetype'] == '.srp' or input_str['filetype'] == ".sdpc":
        levelratio = 2
    else :
        levelratio = 4
    print("处理TCT来自— {} level={} \n".format(input_str['filetype'],level))
    print("读入图片大小:{}\n冗余扫描:{}\nmodel1:{}\nmodel2:{}\n".format(sizepatch_read,widthOverlap, sizepatch_small1, sizepatch_small2))
    print("最终图片大小_model1:{}\n最终图片大小_model2:{}\nmodel1:{}\nmodel2:{}\n冗余裁切:{}\n".format(sizepatch_predict_model1, sizepatch_predict_model2, sizepatch_predict_small1, sizepatch_predict_small2, widthOverlap_predict))
    print("裁切成— 列{} * 行{}\n".format(num_w,num_h))
    
    size_set = {'sizepatch_read':sizepatch_read,#输入分辨率下与model1分辨率下大图同视野的大图尺寸
                'widthOverlap':widthOverlap,#在输入分辨率下大图之间的冗余
                'sizepatch_small1':sizepatch_small1,#输入图像分辨率下与model1模型输入图像的同视野尺寸
                'sizepatch_small2':sizepatch_small2,#输入图像分辨率下与model2模型输入图像的同视野尺寸
                'sizepatch_predict_model1':sizepatch_predict_model1,#model1分辨率下的大图尺寸
                'sizepatch_predict_model2':sizepatch_predict_model2,#model2分辨率下与model1分辨率下大图同视野的大图尺寸
                'sizepatch_predict_small1':sizepatch_predict_small1,#model1模型的输入图像大小
                'sizepatch_predict_small2':sizepatch_predict_small2,#model2模型的输入图像大小
                'widthOverlap_predict':widthOverlap_predict,#model1分辨率下model1要预测的大图尺寸拆分成cutnum后的冗余
                'filetype':input_str['filetype'],#输入图像的数据后缀名
                'level':input_str['level'],#输入图像的level
                'levelratio':levelratio,#输入图像的level之间的倍数
                'cutnum':num_w*num_h}#一个大图被拆分成小块的个数
    return size_set

# =============================================================================
# 前景分割
# =============================================================================


def remove_small_objects(bin_img,tempW,tempH,thre_vol):
    bin_img=np.uint8(bin_img*1)
    _, contours, _=cv2.findContours(bin_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    tempimg=np.ones((tempH,tempW),dtype=np.uint8)
    for contour in contours:
        area=cv2.contourArea(contour)
        if area>=thre_vol:
            bin_img2=cv2.drawContours(tempimg,[contour],-1,(0,0,0),-1)
    bin_img=1-bin_img2
    return bin_img
            
    
def threshold_segmentation(img , binImgLevel, levelratio, input_resolution, tempW, tempH, thre_col = 20 , thre_vol = 150):#使用时thre_col = 20 , thre_vol = 150
    wj1 = img.max(axis = 2)
    wj2 = img.min(axis = 2)
    bin_img = (wj1 - wj2) > thre_col
    thre_vol = int(thre_vol *0.235747/input_resolution)
    thre_vol = int(thre_vol/levelratio ** binImgLevel)
    bin_img=remove_small_objects(bin_img,tempW,tempH,thre_vol)
#    bin_img = morphology.remove_small_objects(bin_img, min_size=thre_vol, connectivity=1)
    return bin_img
# =============================================================================
# 目前软件组将所有数据都转变成srp格式，但是分辨率和层级关系确与srp不同
# 所以写了一个根据读入图像的mpp,不同level下的宽高计算其层级，和计算thre_vol、num_vol的函数
# =============================================================================
#pathfile=r'Z:\HanWei\convertFrom\1135189.srp'
def computeLevel(pathfile):
    ors = pysrp.Srp()
    ors.open(pathfile)
    attrs=ors.getAttrs()
    levelNum=attrs['level']
    input_resolution=float(attrs['mpp'])
    w0=attrs['width']
    attrs1=ors.getLevelDimention(1)
    w1=attrs1['width']
    levelratio=round(w0/w1)
    #计算model1ReadLevel,binImgLevel
    if input_resolution*levelratio>0.586:
        model1ReadLevel=0
    else:
        model1ReadLevel=1
    referLevel0=0.235747*2**4

    templist=[]
    for i in range(levelNum):
        temp=referLevel0/(input_resolution*levelratio**i)
        templist.append(temp)
    templist1=[abs(i-1) for i in templist]
    binImgLevel=templist1.index(min(templist1))
    referNum=60*2**4
    thre_num=int(referNum*0.235747/input_resolution)
    thre_num=int(thre_num/levelratio**binImgLevel)
    print("inputResolution:{}\nlevelratio:{}\nmodel1ReadLevel={}\nbinImgLevel={}\nthre_num={}".format(input_resolution,levelratio,model1ReadLevel,binImgLevel,thre_num))    
    #计算binImgLevel下的bin_img
    tempattrs=ors.getLevelDimention(binImgLevel)
    tempW=tempattrs['width']
    tempH=tempattrs['height']
    img=ors.ReadRegionRGB(binImgLevel, 0, 0, tempW, tempH)
    img = np.ctypeslib.as_array(img)
    img.dtype = np.uint8
    img = img.reshape((tempH, tempW, 3))
    bin_img=threshold_segmentation(img , binImgLevel, levelratio, input_resolution, tempW, tempH, thre_col = 20 , thre_vol = 150)
    return input_resolution, levelratio, model1ReadLevel, binImgLevel, bin_img,thre_num
    
    
    
def Size_set_srp(pathfile, input_str = {'filetype': '.srp',# .svs .sdpc .mrxs
                 'level':0,
                 'read_size_model1_resolution': (512, 512), #0.586分辨率
                 'scan_over': (128, 128),#0.586分辨率下 (512, 512)之间的冗余
                 'model1_input': (512, 512, 3),
                 'model2_input': (256, 256, 3),
                 'model1_resolution':0.586,
                 'model2_resolution':0.293}):
    level=input_str['level']
    filetype=input_str['filetype']
    input_resolution, levelratio, model1ReadLevel, binImgLevel, bin_img, thre_num=computeLevel(pathfile)
    sizepatch_read = tuple(np.uint32(np.dot(input_str['read_size_model1_resolution'],input_str['model1_resolution']/input_resolution)))
    widthOverlap = tuple(np.uint32(np.dot(input_str['scan_over'],input_str['model1_resolution']/input_resolution)))
    sizepatch_small1 = tuple(np.uint32(np.dot(input_str['model1_input'][:-1],input_str['model1_resolution']/input_resolution)))
    sizepatch_small2 = tuple(np.uint32(np.dot(input_str['model2_input'][:-1],input_str['model2_resolution']/input_resolution)))
    # predict size
    sizepatch_predict_model1 = input_str['read_size_model1_resolution']
    sizepatch_predict_small1 = input_str['model1_input'][:-1]
    sizepatch_predict_small2 = input_str['model2_input'][:-1]
       
    print("处理TCT来自— {} model1Readlevel={} \n binImgLevel={}".format(input_str['filetype'],model1ReadLevel,binImgLevel))
    print("level0下分辨率：{}\n读取图片大小:{}\n冗余为:{}\n".format(input_resolution,sizepatch_read,widthOverlap))
    print("最终输入模型图片在level0下大小_model1:{}\n最终图片大小_model2:{}\n".format(sizepatch_small1, sizepatch_small2))
    
    size_set = {'sizepatch_read':sizepatch_read,#输入分辨率下与model1分辨率下大图同视野的大图尺寸
                'widthOverlap':widthOverlap,#在输入分辨率下大图之间的冗余
                'sizepatch_small1':sizepatch_small1,#输入图像分辨率下与model1模型输入图像的同视野尺寸
                'sizepatch_small2':sizepatch_small2,#输入图像分辨率下与model2模型输入图像的同视野尺寸
                'sizepatch_predict_model1':sizepatch_predict_model1,#model1分辨率下的大图尺寸
                'sizepatch_predict_small1':sizepatch_predict_small1,#model1模型的输入图像大小
                'sizepatch_predict_small2':sizepatch_predict_small2,#model2模型的输入图像大小
                'filetype':input_str['filetype'],#输入图像的数据后缀名
                'level':input_str['level'],#输入图像的level
                'levelratio':levelratio,#输入图像的level之间的倍数
                'model1ReadLevel':model1ReadLevel,
                'input_resolution':input_resolution,
                'binImgLevel':binImgLevel,
                'thre_num':thre_num}
    return size_set,bin_img
# =============================================================================
# 计算model1ReadLevel,binImgLevel,binImg
# =============================================================================

def TCT_set():
    pathfolder_svs_set = {'3d1':
                     ['H:/TCTDATA/Shengfuyou_1th/Positive/',
                      'H:/TCTDATA/Shengfuyou_1th/GoldTest/',
                      'H:/TCTDATA/Shengfuyou_1th/Negative/'],
                      '3d2':
                     ['H:/TCTDATA/Shengfuyou_2th/Positive/',
                      'H:/TCTDATA/Shengfuyou_2th/Negative/'],
                      '3d3':
                     ['H:/TCTDATA/3D_Shengfuyou_3th/Positive/',
                      'H:/TCTDATA/3D_Shengfuyou_3th/Negative/'],
                      'tongji':
                     ['H:/TCTDATA/tongji_1th/Positive/20180418/',
                      'H:/TCTDATA/tongji_1th/Positive/20180419/',
                      'H:/TCTDATA/tongji_1th/Positive/20180420p1/20180420p-1/',
                      'H:/TCTDATA/tongji_1th/Positive/20180420p1/20180420p-2/',
                      'H:/TCTDATA/tongji_1th/Negative/20180420n-1/',
                      'H:/TCTDATA/tongji_1th/Negative/20180420n-2/'],
                     '20x':
                     ['H:/TCTDATA/our/Positive/Shengfuyou_3th/',
                      'H:/TCTDATA/our/Positive/Shengfuyou_4th/',
                      'H:/TCTDATA/our/Positive/Shengfuyou_5th/svs-20/',
                      'H:/TCTDATA/our/Negative/ShengFY-N-L240(origin date)/'],
                      '10x':
                     ['H:/TCTDATA/our/10x/Positive/2018/',
                      'H:/TCTDATA/our/10x/Positive/unsure/',
                      'H:/TCTDATA/our/10x/Positive/ShengFY-P-L240 (origin date)/',
                      'H:/TCTDATA/our/Positive/Shengfuyou_5th/svs-10/',
                      'H:/TCTDATA/our/10x/Negative/ShengFY-N-L240 (origin date)/'],                
                     'our_dyetest_10x':
                     ['H:/TCTDATA/our_dyetest/10x/'],
                     'our_dyetest_20x':
                     ['H:/TCTDATA/our_dyetest/20x/'],
                     'szsq_svs':
                     ['H:/TCTDATA/szsq/Shengfuyou_3th/Positive_40x/',
                      'H:/TCTDATA/szsq/Shengfuyou_3th/Negative_40x/'],
                     'szsq_sdpc':
                     ['H:/TCTDATA/SZSQ_originaldata/Shengfuyou_3th/positive/Shengfuyou_3th_positive_40X/',
                      'H:/TCTDATA/SZSQ_originaldata/Shengfuyou_3th/negative/Shengfuyou_3th_negative_40X/',
                      'H:/TCTDATA/SZSQ_originaldata/Shengfuyou_5th/positive/sfy5_21/',
                      'H:/TCTDATA/SZSQ_originaldata/Shengfuyou_7th/positive/Shengfuyou_7th_positive_40x/',
                      'H:/TCTDATA/SZSQ_originaldata/Shengfuyou_7th/negative/Shengfuyou_7th_negative_40x/',
                      'H:/TCTDATA/SZSQ_originaldata/Shengfuyou_1th/',
                      'I:/TCTDATA/SZSQ_originaldata/Tongji_5th/tongji_5th_negative/tongji_5th_negative_7us/',
                      'I:/TCTDATA/SZSQ_originaldata/Tongji_6th/negative/',
                      'I:/TCTDATA/SZSQ_originaldata/Tongji_7th/negative/',
                      'I:/TCTDATA/SZSQ_originaldata/XiaoYuwei/negative/',
                      'I:/TCTDATA/SZSQ_originaldata/XiaoYuWei2/negative/'
                      ]}
    testfile_set = {'Shengfuyou_4th':
                    ['1615888 2226197',
                     '1615953 2226091',
                     '1615696 2226213',
                     '1615128 2226033',
                     '1615231 2226181',
                     '1615267 2226013',
                     '1615786 2226124',
                     '1615768 2226131',
                     '1615650 2226014',
                     '1615683 2226169',
                     '1615355 2226067',
                     '1615119 2226251',
                     '1615361 2226106',
                     '1615334 2226096',
                     '1615151 2226146',
                     '1615259 2226231',
                     '1615741 2226201',
                     '1164967 0893031',
                     '1615795 2226065',
                     '1615410 2226052',
                     '1157214 0893115',
                     '1615760 2226156',
                     '1615993 2226193',
                     '1615887 2226245',
                     '1157195 0893155',
                     '1615902 2226204',
                     '1615959 2226152',
                     '1615919 2226238',
                     '1615547 2226196',
                     '1615450 2226066',
                     '1157108 0893020',
                     '1164334 0893013',
                     '1615373 2226057',
                     '1157250 0893152',
                     '1615749 2226214',
                     '1157265 0893223',
                     '1177430 0893178',
                     '1165441 0893036',
                     '1615512 2226206',
                     '1157240 0893023',
                     '1164444 0893061'],
                    'testfile240 ':
                    ['1149531',
                     '1154896',
                     '1159715',
                     '1161421',
                     '1161645',
                     '1162026',
                     '1179935',
                     '1179944',
                     '1159977',
                     '1159646',
                     '1162017',
                     '1136007',
                     '1161688',
                     '1161394',
                     '1179435',
                     '1179383',
                     '1179676',
                     '1179551',
                     '1180006',
                     '1159936',
                     '1150002'],
                     '2018':
                    ['1160655',
                     '1163605',
                     '1179380',
                     '1169519',
                     '1163234',
                     '1166950',
                     '1166803',
                     '1168804',
                     '1179415']}
    test_sample = {
            'test_p_1':[
                    '1121830 0893129', 
                    '161241qiuxiangguanAscus 19',
                    '01',
                    '16010620 aocuie Ascus 5',
                    '1107554 0893127',
                    '24',
                    '1109395 0893194',
                    '718likehuiH13',
                    '1109443 0893100',
                    '1110082 0893130',
                    '13032118guojuanH9',
                    '16010164lijuanAscus 2',
                    '1124999 0893044',
                    '1108536 0893153',
                    '1112927 0893100',
                    '22',
                    '15100117huyiH15',
                    '1110307 0893247',
                    '1108271 0893050',
                    '1109807 0893002'],
    
        'test_p_2':[
                '100_0001003 2008208',
                '100_1160542 0893157',
                '100_1141369 0893134',
                '69_1158241 0893014',
                '100_1160260 0893136',
                '100_1160991 0893183',
                '100_1142786 0893148',
                '100_1158898 0893051',
                '69_1143284 0893028',
                '100_0002604 2008048',
                '100_0000331 2008056',
                '100_1160904 0893039',
                '69_1142307 0893142',
                '69_1144886 0893069',
                '100_0070369 1009075',
                '100_0000017 2008040',
                '100_1142799 0893043',
                '69_1138839 0893122',
                '100_1143298 0893017',
                '100_1158950 0893144'],
    
        'test_n_1':[
                '0067387 1009163',
                '0067330 1009212',
                '0067327 1009116',
                '0067337 1009251',
                '0067326 1009026',
                '0067315 1009028',
                '0067328 1009068',
                '0067316 1009174',
                '0067413 1009175',
                '0067404 1009015',
                '0067418 1009002',
                '0067317 1009192',
                '0067408 1009141',
                '1140102 0893192',
                '0067437 1009009',
                '0067325 1009168',
                '1140106 0893093',
                '0067385 1009127',
                '0067421 1009199',
                '0067390 1009003'],
    
        'test_n_2':[
                '0423_4M11',
                '0423_2M12',
                 '0418_3M07',
                 '0418_4M12',
                 '0424_2M03',
                 '0418_3M20',
                 '0424_3M02',
                 '0423_4M08',
                 '0418_4M24',
                 '0423_1M06',
                 '0423_4M09',
                 '0424_1M21',
                 '0424_2M11',
                 '0423_2M24',
                 '0418_1M21',
                 '0418_4M19',
                 '0423_3M21',
                 '0423_4M12',
                 '0424_4M22',
                 '0423_1M01',
                 '0418_4M13',
                 '0418_4M02',
                 '0423_3M20',
                 '0418_1M10',
                 '0424_3M14',
                 '0418_2M08',
                 '0418_3M25',
                 '0424_1M13',
                 '0423_4M02',
                 '0423_1M05',
                 '0423_4M15-1',
                 '0423_1M25',
                 '0424_4M04',
                 '0423_4M01',
                 '0423_3M14',
                 '0423_3M24',
                 '0418_4M17',
                 '0423_3M03',
                 '0418_1M16',
                 '0418_4M04',
                 '0423_2M25',
                 '0418_2M03',
                 '0418_2M19',
                 '0424_2M01',
                 '0424_2M18',
                 '0418_3M17',
                 '0424_3M17',
                 '0424_1M05',
                 '0418_2M15',
                 '0424_4M23',
                 '0423_3M06',
                 '0424_2M02',
                 '0423_4M17',
                 '0418_3M12',
                 '0423_1M13',
                 '0423_3M22',
                 '0424_3M13',
                 '0424_2M25',
                 '0423_2M07',
                 '0424_4M18',
                 '0423_1M07',
                 '0418_1M15',
                 '0423_2M04',
                 '0418_1M07',
                 '0423_2M18',
                 '0424_1M14',
                 '0418_2M17',
                 '0418_2M04',
                 '0423_4M13',
                 '0418_3M04',
                 '0418_4M20',
                 '0423_2M19',
                 '0418_1M01',
                 '0424_2M24',
                 '0424_2M20',
                 '0424_4M10',
                 '0424_2M16',
                 '0423_4M05',
                 '0424_1M19',
                 '0424_2M06',
                 '0423_4M19',
                 '0418_3M06',
                 '0418_2M12_2',
                 '0418_4M18',
                 '0424_4M05',
                 '0418_4M09',
                 '0418_4M07',
                 '0418_4M16',
                 '0418_2M09',
                 '0418_2M20',
                 '0418_4M23',
                 '0423_1M23',
                 '0424_4M03',
                 '0424_3M16',
                 '0418_3M10',
                 '0418_3M08',
                 '0418_1M08',
                 '0424_3M20',
                 '0423_2M21',
                 '0423_3M13'],
    
        'test_p_our_sfy3':[
                '1149531',
                '1154896',
                '1159715',
                '1161421',
                '1161645',
                '1162026',
                '1179935',
                '1179944',
                '1160655',
                '1163605',
                '1179380',
                '2018-10-26-144149-716',
                '2018-10-26-145844-589',
                '2018-11-01-203533-337',
                '2018-11-01-211611-262'],
                
                
        'test_p_our_sfy4':[
                '1615888 2226197',
                '1615953 2226091',
                '1615119 2226251',
                '1615334 2226096',
                '1615259 2226231',
                '1164967 0893031',
                '1615151 2226146',
                '1615741 2226201',
                '1615795 2226065',
                '1157214 0893115',
                '1615993 2226193',
                '1615959 2226152',
                '1615547 2226196',
                '1157108 0893020',
                '1615373 2226057',
                '1615512 2226206'],
                
        'test_p_our_sfy5':[
                '1152412 0893203',
                '1152435 0893223',
                '1152440 0893238',
                '1152449 0893159',
                '1152737 0893105',
                '1152878 0893200',
                '1615231 2226181-1',
                '1615683 2226169',
                '1615768 2226131',
                '1615861 2226021'], 
            
        'test_n_our':[
                '1159887',
                '1159881',
                '1159998',
                '1160001',
                '1160020',
                '1160026',
                '1160033',
                '1179592',
                '1179599',
                '1179565',
                '1179568'],
        'test_tongji3_n':[
                '19042362_1075293',
                '19042369_1073288',
                '19042610_1058069',
                '19042370_1073624',
                '19042373_1064860',
                '190425314_1075970',
                '19042363_1069624',
                '19042611_1068105',
                '19042341_1060772',
                '190425320_1063288',
                '19042343_1058093',
                '190425308_1074340',
                '19042602_1051021',
                '190425317_1074016',
                '190424367_1075445',
                '190425306_1064417',
                '19042367_08800194',
                '20190508_170454',
                '19042354_1075397',
                '20190507_151841',
                '190425319_1063108',
                '190424366_1063087',
                '190424360_1074063'],

        'test_tongji3_p':[
                '190320612',
                '190325602',
                '042910101',
                '1902286071',
                '190220624',
                '190218620',
                '19031456',
                '190318624',
                '190313612',
                '190326602',
                '190228604',
                '190301605',
                '190301619',
                '19031440',
                '190325616',
                '190306618',
                '19032664',
                '190228606',
                '190315309',
                '190301608',
                '190327608',
                '190326320',
                '190329320',
                '190220614',
                '190222802',
                '19030739',
                '190315617'],
                
        'test_tongji4_p' : [
                'tj190506604',
                'tj190513311-1087981',
                'tj190408604',
                'tj190517620',
                'tj190408610',
                'tj190401606',
                'tj190514602',
                'tj190508615',
                'tj19042017-1071688',
                'tj19051065-1084179',
                'tj19041643-1058455',
                'tj190523321-1091791',
                'tj190401303-1066384'
                'tj190506606',
                'tj19042018-1060136',
                'tj19042818-1072196',
                'tj190403601',
                'tj190510103-1085484',
                'tj190513609',
                'tj190423603',
                'tj190408601',
                'tj190520306-1094630',
                'tj190401612',
                'tj190505604',
                'tj190503607',
                'tj19041716-1072982',
                'tj19052120-1085215' ],                                   
                 
        'test_tj4_n' : [
                'tj19041819_1058361',
                'tj19041828_1059893',
                'tj19041822_900527',
                'tj190418301_1063023',
                'tj19041821_1058456',
                'tj19041701_1072077',
                'tj19041819_1058361',
                'tj19041820_1068417',
                'tj190418307_1057768',
                'tj190418312_1073583'],
                
       'test_tj_4th_negative_611':[
                'tj19041660', 
                'tj19041755',
                'tj19041901',
                'tj19041904',
                'tj19041909',
                'tj19041924',
                'tj19041933',
                'tj19042006',
                'tj19042013',
                'tj190418356']
                    }
        
    return pathfolder_svs_set, testfile_set, test_sample

# -*- coding: utf-8 -*-
"""
Created on Wed Jun  3 16:10:23 2020
所有的测试样本集片名
@author: A-WIN10
"""
import json
test_sample = {
        'test_p_sfy1':[
                '1121830 0893129', 
                '161241qiuxiangguanAscus 19',
                '01',
                '16010620 aocuie Ascus 5',
                '1107554 0893127',
                '24',
                '1109395 0893194',
                '718likehuiH13',
                '1109443 0893100',
                '1110082 0893130',
                '13032118guojuanH9',
                '16010164lijuanAscus 2',
                '1124999 0893044',
                '1108536 0893153',
                '1112927 0893100',
                '22',
                '15100117huyiH15',
                '1110307 0893247',
                '1108271 0893050',
                '1109807 0893002'],

    'test_p_sfy2':[
            '100_0001003 2008208',
            '100_1160542 0893157',
            '100_1141369 0893134',
            '69_1158241 0893014',
            '100_1160260 0893136',
            '100_1160991 0893183',
            '100_1142786 0893148',
            '100_1158898 0893051',
            '69_1143284 0893028',
            '100_0002604 2008048',
            '100_0000331 2008056',
            '100_1160904 0893039',
            '69_1142307 0893142',
            '69_1144886 0893069',
            '100_0070369 1009075',
            '100_0000017 2008040',
            '100_1142799 0893043',
            '69_1138839 0893122',
            '100_1143298 0893017',
            '100_1158950 0893144'],

    'test_n_sfy1':[
            '0067387 1009163',
            '0067330 1009212',
            '0067327 1009116',
            '0067337 1009251',
            '0067326 1009026',
            '0067315 1009028',
            '0067328 1009068',
            '0067316 1009174',
            '0067413 1009175',
            '0067404 1009015',
            '0067418 1009002',
            '0067317 1009192',
            '0067408 1009141',
            '1140102 0893192',
            '0067437 1009009',
            '0067325 1009168',
            '1140106 0893093',
            '0067385 1009127',
            '0067421 1009199',
            '0067390 1009003'],

    'test_n_sfy2':[
            '0423_4M11',
            '0423_2M12',
             '0418_3M07',
             '0418_4M12',
             '0424_2M03',
             '0418_3M20',
             '0424_3M02',
             '0423_4M08',
             '0418_4M24',
             '0423_1M06',
             '0423_4M09',
             '0424_1M21',
             '0424_2M11',
             '0423_2M24',
             '0418_1M21',
             '0418_4M19',
             '0423_3M21',
             '0423_4M12',
             '0424_4M22',
             '0423_1M01',
             '0418_4M13',
             '0418_4M02',
             '0423_3M20',
             '0418_1M10',
             '0424_3M14',
             '0418_2M08',
             '0418_3M25',
             '0424_1M13',
             '0423_4M02',
             '0423_1M05',
             '0423_4M15-1',
             '0423_1M25',
             '0424_4M04',
             '0423_4M01',
             '0423_3M14',
             '0423_3M24',
             '0418_4M17',
             '0423_3M03',
             '0418_1M16',
             '0418_4M04',
             '0423_2M25',
             '0418_2M03',
             '0418_2M19',
             '0424_2M01',
             '0424_2M18',
             '0418_3M17',
             '0424_3M17',
             '0424_1M05',
             '0418_2M15',
             '0424_4M23',
             '0423_3M06',
             '0424_2M02',
             '0423_4M17',
             '0418_3M12',
             '0423_1M13',
             '0423_3M22',
             '0424_3M13',
             '0424_2M25',
             '0423_2M07',
             '0424_4M18',
             '0423_1M07',
             '0418_1M15',
             '0423_2M04',
             '0418_1M07',
             '0423_2M18',
             '0424_1M14',
             '0418_2M17',
             '0418_2M04',
             '0423_4M13',
             '0418_3M04',
             '0418_4M20',
             '0423_2M19',
             '0418_1M01',
             '0424_2M24',
             '0424_2M20',
             '0424_4M10',
             '0424_2M16',
             '0423_4M05',
             '0424_1M19',
             '0424_2M06',
             '0423_4M19',
             '0418_3M06',
             '0418_2M12_2',
             '0418_4M18',
             '0424_4M05',
             '0418_4M09',
             '0418_4M07',
             '0418_4M16',
             '0418_2M09',
             '0418_2M20',
             '0418_4M23',
             '0423_1M23',
             '0424_4M03',
             '0424_3M16',
             '0418_3M10',
             '0418_3M08',
             '0418_1M08',
             '0424_3M20',
             '0423_2M21',
             '0423_3M13'],

    'test_p_our_sfy3':[
            '1149531',
            '1154896',
            '1159715',
            '1161421',
            '1161645',
            '1162026',
            '1179935',
            '1179944',
            '1160655',
            '1163605',
            '1179380',
            '2018-10-26-144149-716',
            '2018-10-26-145844-589',
            '2018-11-01-203533-337',
            '2018-11-01-211611-262'],
            
            
    'test_p_our_sfy4':[
            '1615888 2226197',
            '1615953 2226091',
            '1615119 2226251',
            '1615334 2226096',
            '1615259 2226231',
            '1164967 0893031',
            '1615151 2226146',
            '1615741 2226201',
            '1615795 2226065',
            '1157214 0893115',
            '1615993 2226193',
            '1615959 2226152',
            '1615547 2226196',
            '1157108 0893020',
            '1615373 2226057',
            '1615512 2226206'],
            
    'test_p_our_sfy5':[
            '1152412 0893203',
            '1152435 0893223',
            '1152440 0893238',
            '1152449 0893159',
            '1152737 0893105',
            '1152878 0893200',
            '1615231 2226181-1',
            '1615683 2226169',
            '1615768 2226131',
            '1615861 2226021'], 
        
    'test_n_our_sfy3240':[
            '1159887',
            '1159881',
            '1159998',
            '1160001',
            '1160020',
            '1160026',
            '1160033',
            '1179592',
            '1179599',
            '1179565',
            '1179568'],
    'test_n_szsq_tongji3':[
                '19042362_1075293',
                '19042369_1073288',
                '19042610_1058069',
                '19042370_1073624',
                '19042373_1064860',
                '190425314_1075970',
                '19042363_1069624',
                '19042611_1068105',
                '19042341_1060772',
                '190425320_1063288',
                '19042343_1058093',
                '190425308_1074340',
                '19042602_1051021',
                '190425317_1074016',
                '190424367_1075445',
                '190425306_1064417',
                '19042367_08800194',
                '20190508_170454',
                '19042354_1075397',
                '20190507_151841',
                '190425319_1063108',
                '190424366_1063087',
                '190424360_1074063'],
            
    'test_p_szsq_tongji3':[
                '190320612',
                '190325602',
                '042910101',
                '1902286071',
                '190220624',
                '190218620',
                '19031456',
                '190318624',
                '190313612',
                '190326602',
                '190228604',
                '190301605',
                '190301619',
                '19031440',
                '190325616',
                '190306618',
                '19032664',
                '190228606',
                '190315309',
                '190301608',
                '190327608',
                '190326320',
                '190329320',
                '190220614',
                '190222802',
                '19030739',
                '190315617'],
            
    'test_p_szsq_tongji4' : [         
                'tj190506604',
                'tj190513311-1087981',
                'tj190408604',
                'tj190517620',
                'tj190408610',
                'tj190401606',
                'tj190514602',
                'tj190508615',
                'tj19042017-1071688',
                'tj19051065-1084179',
                'tj19041643-1058455',
                'tj190523321-1091791',
                'tj190401303-1066384'
                'tj190506606',
                'tj19042018-1060136',
                'tj19042818-1072196',
                'tj190403601',
                'tj190510103-1085484',
                'tj190513609',
                'tj190423603',
                'tj190408601',
                'tj190520306-1094630',
                'tj190401612',
                'tj190505604',
                'tj190503607',
                'tj19041716-1072982',
                'tj19052120-1085215' ],  
                 
    'test_n_szsq_tongji4' : [
                'tj19041819_1058361',
                'tj19041828_1059893',
                'tj19041822_900527',
                'tj190418301_1063023',
                'tj19041821_1058456',
                'tj19041701_1072077',
                'tj19041819_1058361',
                'tj19041820_1068417',
                'tj190418307_1057768',
                'tj190418312_1073583',
                'tj19041660', 
                'tj19041755',
                'tj19041901',
                'tj19041904',
                'tj19041909',
                'tj19041924',
                'tj19041933',
                'tj19042006',
                'tj19042013',
                'tj190418356'],
    'test_p_szsq_tongji5' :[
            'tj190531604',
            'tj190610603',
            'tj190619609',
            'tj190531318',
            'tj190610618',
            'tj190604601',
                ],
    'test_n_szsq_tongji5' :[
            'tj19052341',
            'tj19052294',
            'tj190522351',
            'tj19052345',
            'tj19052298',
            'tj190522308',
            'tj190522307',
            'tj190522119',
            'tj19052299',
            'tj190522116',
            'tj190522117',
            'tj190522109',
            'tj19052261',
            'tj190522114',
            'tj19052287',
            'tj1905223021',
            'tj190522302',
            'tj190522305',
            'tj190522357',
            'tj190522118',
            'tj190522105',
            'tj190522106',
            'tj19052346',
            'tj19052292',
            'tj19052293',
            'tj190522103'
                ],
    'test_p_szsq_tongji6' :[
            'tj190715604',
            'tj19070833',
            'tj190713604',
            'tj190711602',
            'tj190708607',
            'tj190704604',
            'tj190717016',
            'tj190715020',
            'tj190709350',
            'tj190717602',
            'tj19062408',
            'tj19070905',
            'tj190704603',
            'tj190715340',
            'tj190629320',
            'tj190704310',
            'tj190712604',
            'tj19071216',
            'tj190722039',
            'tj190718601',
            'tj19062882',
            'tj19062452',
            'tj190701611',
            'tj190624306',
            'tj190704333',
            'tj19062642',
            'tj190624303',
            'tj19062741',
            'tj19070957',
            'tj190624117'],
            
    'test_n_szsq_tongji6' :[
            'tj19052530',
            'tj19052460',
            'tj19052383',
            'tj19052773',
            'tj19052479',
            'tj19052517',
            'tj19052512',
            'tj19052541',
            'tj190524315',
            'tj190523102',
            'tj190523301',
            'tj19052462',
            'tj19052759',
            'tj190524301',
            'tj190527318',
            'tj19052707',
            'tj19052426',
            'tj19052457',
            'tj19052533',
            'tj19052716',
            'tj19052532',
            'tj19052440',
            'tj190527321',
            'tj19052471',
            'tj19052539',
            'tj19052337',
            'tj19052714',
            'tj19052703',
            'tj19052410',
            'tj190527331',
            ],
    'test_p_szsq_tongji7' :[   
            'tj190807605',
            'tj190812604',
            'tj190809606',
            'tj190809604',
            'tj190812606',
            'tj190810319',
            'tj19080269',
            'tj19073019',
            'tj19080652',
            'tj190810040',
            'tj190815607',
            'tj190814612',
            'tj190810011',
            'tj190812608',
            'tj19080850',
            'tj19080935',
            'tj190727071',
            'tj190805608',
            'tj190804335',
            'tj19080778',
            'tj190807316',
            ],
            
    'test_n_szsq_tongji7' :[   
            'tj19052530',
            'tj19052460',
            'tj19052383',
            'tj19052773',
            'tj19052479',
            'tj19052517',
            'tj19052512',
            'tj19052541',
            'tj190524315',
            'tj190523102',
            'tj190523301',
            'tj19052462',
            'tj19052759',
            'tj190524301',
            'tj190527318',
            'tj19052707',
            'tj19052426',
            'tj19052457',
            'tj19052533',
            'tj19052716',
            'tj19052532',
            'tj19052440',
            'tj190527321',
            'tj19052471',
            'tj19052539',
            'tj19052337',
            'tj19052714',
            'tj19052703',
            'tj19052410',
            'tj190527331',
            ],
    'test_p_szsq_xyw1' :[
            '051300024',
            '052910029',
            '062710082',
            '060310092',
            '060310075',
            '051300013',
            '051300037',
            '060310083',
            '051300001',
            '051300005',
            '052910066',
            '052910078',
            '060310076',
            '060310085',
            '052910052',
            '052910015',
            '052910100',
            '051300021',
            '190422050',
            '051300009',
            '190422092',
            '052910002',
            '052910012',
            '052910074',
            '062710089',
            '051300015',
            '190422040',
            '052910043',
            '062710098',
            '051300016',
            '052910041',
            '052910091',
            '052910024',
            '052910030',
            '051300007',
            '060310096',
            '052910071',
            '052910057',
            '051300004',
            '052910051',
            '052910049',
            '051300002',
            '060310098',
            '062710078',
            '052910092',
            '062710088'
            ],         
    'test_n_szsq_xyw1' :[
            '060310034',
            '060310030',
            '060310039',
            '052800008',
            '052800031',
            '060310009',
            '051300059',
            '060310001',
            '060310012',
            '052800013',
            '062710064',
            '060310044',
            '051300057',
            '052800089',
            '052800006',
            '053010023',
            '051300054',
            '060310023',
            '053010052',
            '053010076',
            '062700031',
            '051300043',
            '052800054',
            '060310041',
            '190422026',
            '060310062',
            '051300090',
            '062700005',
            '052800085',
            '051300060',
            '062700030',
            '053010095',
            '051300071',
            '060310040',
            '053010050',
            '053010017',
            '190422064',
            '062700014',
            '053010064',
            '060310007',
            '052800077',
            '052800064',
            '053010084',
            '053010044',
            '060310020',
            '190422002',
            '052800045',
            '190422072',
            '053010025',
            '060310005',
            '052800017',
            '062700011',
            '190422084',
            '190422030',
            '060310029',
            '052800057',
            '051300066',
            '190422063',
            '051300033',
            '052800033',
            '062710069',
            '190422089',
            '060310068',
            '052800021',
            '052800099',
            '060310058',
            '051300079',
            '052800041',
            '052800088',
            '062700018',
            '062710052',
            '062700012',
            '060310051',
            '051300077',
            '051300095',
            '060310052',
            '051300087',
            '053010012',
            '053010054',
            '052800002',
            '052800042',
            '053010079',
            '053010042',
            '051300072',
            '051300092',
            '053010057',
            '052800093',
            '052800012',
            '053010100',
            '052800040',
            '060310059',
            '052800078',
            '062710042',
            '060310037',
            '060310057',
            '060310025',
            '062710045',
            '190422018',
            '060310004',
            '062710066',
            '060310060',
            '051300051',
            '053010072',
            '062710040',
            '190422008',
            '060310026',
            '053010026',
            '053010055',
            '060310036',
            '051300075',
            '051300040',
            '051300045',
            '052800080',
            '051300096',
            '053010030',
            '052800005',
            '053010046',
            '052800003',
            '062710059',
            '190422069',
            '062710033',
            '062700019',
            '051300041',
            '190422056',
            '052800052',
            '053010039',
            '053010037',
            '053010040',
            '062710057',
            '190422006'
            ],
            
    'test_p_szsq_xyw2' :[
            '1909050030',
            '1909060085',
            '1909050024',
            '1909050018',
            '1909060081',
            '1909050091',
            '1909060073',
            '1909060071',
            '1909050070',
            '1909050088',
            '1909060065',
            '1909060087',
            '1909060076',
            '1909050014',
            '1909050085',
            '1909050043',
            '1909050089',
            '1909060093',
            '1909060086',
            '1909050049',
            '1909060092',
            '1909050073',
            '1909060089',
            '1909050019',
            '1909050095',
            '1909050067',
            '1909050029',
            '1909050037',
            '1909060077',
            '1909060066',
            '1909060090',
            '1909060088',
            '1909060072',
            '1909060078',
            ],        
    'test_n_szsq_xyw2' :[
            '1909050063',
            '1909060044',
            '1909060027',
            '1909050052',
            '1909060005',
            '1909060003',
            '1909060028',
            '1909050053',
            '1909060008',
            '1909060029',
            '1909060018',
            '1909060033',
            '1909050055',
            '1909050100',
            '1909050003',
            '1909050062',
            '1909050064',
            '1909060048',
            '1909060020',
            '1909060001',
            '1909060042',
            '1909060059',
            '1909060049',
            '1909060050',
            '1909060009',
            '1909060021',
            ]
               }

jsObj=json.dumps(test_sample)
with open(r'L:\tmp\total.json','w') as f:
    f.write(jsObj)
    f.close()
